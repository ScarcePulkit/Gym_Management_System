var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { loadAbsorbersPlugin } from "tsparticles-plugin-absorbers";
import { loadEmittersPlugin } from "tsparticles-plugin-emitters";
import { loadExternalTrailInteraction } from "tsparticles-interaction-external-trail";
import { loadPolygonMaskPlugin } from "tsparticles-plugin-polygon-mask";
import { loadRollUpdater } from "tsparticles-updater-roll";
import { loadSlim } from "tsparticles-slim";
import { loadTiltUpdater } from "tsparticles-updater-tilt";
import { loadTwinkleUpdater } from "tsparticles-updater-twinkle";
import { loadWobbleUpdater } from "tsparticles-updater-wobble";
export function loadFull(engine) {
    return __awaiter(this, void 0, void 0, function* () {
        yield loadSlim(engine);
        yield loadRollUpdater(engine);
        yield loadTiltUpdater(engine);
        yield loadTwinkleUpdater(engine);
        yield loadWobbleUpdater(engine);
        yield loadExternalTrailInteraction(engine);
        yield loadAbsorbersPlugin(engine);
        yield loadEmittersPlugin(engine);
        yield loadPolygonMaskPlugin(engine);
    });
}
