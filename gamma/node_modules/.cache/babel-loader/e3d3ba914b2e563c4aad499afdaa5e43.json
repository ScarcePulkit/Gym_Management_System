{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Circle, ExternalInteractorBase, Vector, calcEasing, clamp, getDistances, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions;\n\n      if (mode !== \"attract\") {\n        return;\n      }\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      container.attract.clicking = true;\n      container.attract.count = 0;\n\n      for (const particle of container.attract.particles) {\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n\n          container.attract.clicking = false;\n        }\n      }, options.interactivity.modes.attract.duration * 1000);\n    };\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events;\n\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n\n  reset() {}\n\n  interact() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const container = this.container,\n            options = container.actualOptions,\n            mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n            events = options.interactivity.events,\n            hoverEnabled = events.onHover.enable,\n            hoverMode = events.onHover.mode,\n            clickEnabled = events.onClick.enable,\n            clickMode = events.onClick.mode;\n\n      if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n        this.hoverAttract();\n      } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n        this.clickAttract();\n      }\n    });\n  }\n\n  hoverAttract() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const attractRadius = container.retina.attractModeDistance;\n    this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n\n  processAttract(position, attractRadius, area) {\n    const container = this.container;\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    const query = container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = getDistances(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n\n  clickAttract() {\n    const container = this.container;\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n\n      container.attract.count++;\n\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const attractRadius = container.retina.attractModeDistance;\n      this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n\n    return;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/dhair_gzqoc8v/Desktop/DBMS/DBMS_Project/gamma/node_modules/tsparticles-interaction-external-attract/Attractor.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Circle","ExternalInteractorBase","Vector","calcEasing","clamp","getDistances","isInArray","mouseMoveEvent","Attractor","constructor","container","attract","particles","handleClickMode","mode","options","actualOptions","clicking","count","particle","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","interactivity","modes","duration","isEnabled","mouse","events","position","onHover","enable","clickPosition","onClick","hoverMode","clickMode","reset","interact","mouseMoveStatus","status","hoverEnabled","clickEnabled","hoverAttract","clickAttract","mousePos","attractRadius","retina","attractModeDistance","processAttract","x","y","area","attractOptions","query","quadTree","dx","dy","distance","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { Circle, ExternalInteractorBase, Vector, calcEasing, clamp, getDistances, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\r\nexport class Attractor extends ExternalInteractorBase {\r\n    constructor(container) {\r\n        super(container);\r\n        if (!container.attract) {\r\n            container.attract = { particles: [] };\r\n        }\r\n        this.handleClickMode = (mode) => {\r\n            const options = this.container.actualOptions;\r\n            if (mode !== \"attract\") {\r\n                return;\r\n            }\r\n            if (!container.attract) {\r\n                container.attract = { particles: [] };\r\n            }\r\n            container.attract.clicking = true;\r\n            container.attract.count = 0;\r\n            for (const particle of container.attract.particles) {\r\n                particle.velocity.setTo(particle.initialVelocity);\r\n            }\r\n            container.attract.particles = [];\r\n            container.attract.finish = false;\r\n            setTimeout(() => {\r\n                if (!container.destroyed) {\r\n                    if (!container.attract) {\r\n                        container.attract = { particles: [] };\r\n                    }\r\n                    container.attract.clicking = false;\r\n                }\r\n            }, options.interactivity.modes.attract.duration * 1000);\r\n        };\r\n    }\r\n    isEnabled() {\r\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events;\r\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\r\n            return false;\r\n        }\r\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\r\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\r\n    }\r\n    reset() {\r\n    }\r\n    interact() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\r\n            if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\r\n                this.hoverAttract();\r\n            }\r\n            else if (clickEnabled && isInArray(\"attract\", clickMode)) {\r\n                this.clickAttract();\r\n            }\r\n        });\r\n    }\r\n    hoverAttract() {\r\n        const container = this.container;\r\n        const mousePos = container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return;\r\n        }\r\n        const attractRadius = container.retina.attractModeDistance;\r\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\r\n    }\r\n    processAttract(position, attractRadius, area) {\r\n        const container = this.container;\r\n        const attractOptions = container.actualOptions.interactivity.modes.attract;\r\n        const query = container.particles.quadTree.query(area);\r\n        for (const particle of query) {\r\n            const { dx, dy, distance } = getDistances(particle.position, position);\r\n            const velocity = attractOptions.speed * attractOptions.factor;\r\n            const attractFactor = clamp(calcEasing(1 - distance / attractRadius, attractOptions.easing) * velocity, 0, attractOptions.maxSpeed);\r\n            const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\r\n            particle.position.subFrom(normVec);\r\n        }\r\n    }\r\n    clickAttract() {\r\n        const container = this.container;\r\n        if (!container.attract) {\r\n            container.attract = { particles: [] };\r\n        }\r\n        if (!container.attract.finish) {\r\n            if (!container.attract.count) {\r\n                container.attract.count = 0;\r\n            }\r\n            container.attract.count++;\r\n            if (container.attract.count === container.particles.count) {\r\n                container.attract.finish = true;\r\n            }\r\n        }\r\n        if (container.attract.clicking) {\r\n            const mousePos = container.interactivity.mouse.clickPosition;\r\n            if (!mousePos) {\r\n                return;\r\n            }\r\n            const attractRadius = container.retina.attractModeDistance;\r\n            this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\r\n        }\r\n        else if (container.attract.clicking === false) {\r\n            container.attract.particles = [];\r\n        }\r\n        return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}