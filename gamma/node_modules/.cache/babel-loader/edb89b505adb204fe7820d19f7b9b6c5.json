{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled(particle) {\n    return particle.options.collisions.enable;\n  }\n\n  reset() {}\n\n  interact(p1) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const container = this.container,\n            pos1 = p1.getPosition(),\n            radius1 = p1.getRadius(),\n            query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n\n      for (const p2 of query) {\n        if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {\n          continue;\n        }\n\n        const pos2 = p2.getPosition();\n        const radius2 = p2.getRadius();\n\n        if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n          continue;\n        }\n\n        const dist = getDistance(pos1, pos2);\n        const distP = radius1 + radius2;\n\n        if (dist > distP) {\n          continue;\n        }\n\n        resolveCollision(p1, p2, container.fpsLimit / 1000, container.retina.pixelRatio);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/dbms_proj/DBMS_Project/gamma/node_modules/tsparticles-interaction-particles-collisions/Collider.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ParticlesInteractorBase","getDistance","resolveCollision","Collider","constructor","container","isEnabled","particle","options","collisions","enable","reset","interact","p1","pos1","getPosition","radius1","getRadius","query","particles","quadTree","queryCircle","p2","mode","destroyed","spawning","pos2","radius2","Math","abs","round","z","dist","distP","fpsLimit","retina","pixelRatio"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n    interact(p1) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n            for (const p2 of query) {\n                if (p1 === p2 ||\n                    !p2.options.collisions.enable ||\n                    p1.options.collisions.mode !== p2.options.collisions.mode ||\n                    p2.destroyed ||\n                    p2.spawning) {\n                    continue;\n                }\n                const pos2 = p2.getPosition();\n                const radius2 = p2.getRadius();\n                if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                    continue;\n                }\n                const dist = getDistance(pos1, pos2);\n                const distP = radius1 + radius2;\n                if (dist > distP) {\n                    continue;\n                }\n                resolveCollision(p1, p2, container.fpsLimit / 1000, container.retina.pixelRatio);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}