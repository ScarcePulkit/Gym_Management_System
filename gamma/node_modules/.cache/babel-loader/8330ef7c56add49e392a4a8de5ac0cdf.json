{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n  getSidesCount() {\n    return 12;\n  }\n\n  init(container) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = container.actualOptions;\n\n      if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n        const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t);\n\n        if (shapeOptions instanceof Array) {\n          const promises = [];\n\n          for (const character of shapeOptions) {\n            const charShape = character;\n            promises.push(loadFont(charShape.font, charShape.weight));\n          }\n\n          yield Promise.allSettled(promises);\n        } else {\n          if (shapeOptions !== undefined) {\n            const charShape = shapeOptions;\n            yield loadFont(charShape.font, charShape.weight);\n          }\n        }\n      }\n    });\n  }\n\n  draw(context, particle, radius, opacity) {\n    var _a, _b, _c;\n\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    const textParticle = particle;\n\n    if (textParticle.text === undefined) {\n      textParticle.text = textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n    }\n\n    const text = textParticle.text;\n    const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\n    const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\n    const size = Math.round(radius) * 2;\n    const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\n    const fill = particle.fill;\n    const offsetX = text.length * radius / 2;\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/dhair_gzqoc8v/Desktop/DBMS/DBMS_Project/gamma/node_modules/tsparticles-shape-text/TextDrawer.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isInArray","itemFromArray","loadFont","validTypes","TextDrawer","getSidesCount","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","Array","promises","character","charShape","push","font","weight","allSettled","undefined","draw","context","particle","radius","opacity","_a","_b","_c","shapeData","textData","textParticle","text","randomIndexData","style","size","Math","round","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\r\nexport const validTypes = [\"text\", \"character\", \"char\"];\r\nexport class TextDrawer {\r\n    getSidesCount() {\r\n        return 12;\r\n    }\r\n    init(container) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const options = container.actualOptions;\r\n            if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\r\n                const shapeOptions = validTypes\r\n                    .map((t) => options.particles.shape.options[t])\r\n                    .find((t) => !!t);\r\n                if (shapeOptions instanceof Array) {\r\n                    const promises = [];\r\n                    for (const character of shapeOptions) {\r\n                        const charShape = character;\r\n                        promises.push(loadFont(charShape.font, charShape.weight));\r\n                    }\r\n                    yield Promise.allSettled(promises);\r\n                }\r\n                else {\r\n                    if (shapeOptions !== undefined) {\r\n                        const charShape = shapeOptions;\r\n                        yield loadFont(charShape.font, charShape.weight);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    draw(context, particle, radius, opacity) {\r\n        var _a, _b, _c;\r\n        const character = particle.shapeData;\r\n        if (character === undefined) {\r\n            return;\r\n        }\r\n        const textData = character.value;\r\n        if (textData === undefined) {\r\n            return;\r\n        }\r\n        const textParticle = particle;\r\n        if (textParticle.text === undefined) {\r\n            textParticle.text =\r\n                textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\r\n        }\r\n        const text = textParticle.text;\r\n        const style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\";\r\n        const weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\";\r\n        const size = Math.round(radius) * 2;\r\n        const font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\";\r\n        const fill = particle.fill;\r\n        const offsetX = (text.length * radius) / 2;\r\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\r\n        const pos = {\r\n            x: -offsetX,\r\n            y: radius / 2,\r\n        };\r\n        context.globalAlpha = opacity;\r\n        if (fill) {\r\n            context.fillText(text, pos.x, pos.y);\r\n        }\r\n        else {\r\n            context.strokeText(text, pos.x, pos.y);\r\n        }\r\n        context.globalAlpha = 1;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}