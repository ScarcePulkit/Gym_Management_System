{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ExternalInteractorBase, isInArray } from \"tsparticles-engine\";\nexport class Connector extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    return isInArray(\"connect\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  interact() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const container = this.container,\n            options = container.actualOptions;\n\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n        const mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        const distance = Math.abs(container.retina.connectModeRadius),\n              query = container.particles.quadTree.queryCircle(mousePos, distance);\n        let i = 0;\n\n        for (const p1 of query) {\n          const pos1 = p1.getPosition();\n\n          for (const p2 of query.slice(i + 1)) {\n            const pos2 = p2.getPosition(),\n                  distMax = Math.abs(container.retina.connectModeDistance),\n                  xDiff = Math.abs(pos1.x - pos2.x),\n                  yDiff = Math.abs(pos1.y - pos2.y);\n\n            if (xDiff < distMax && yDiff < distMax) {\n              container.canvas.drawConnectLine(p1, p2);\n            }\n          }\n\n          ++i;\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/dbms_proj/DBMS_Project/gamma/node_modules/tsparticles-interaction-external-connect/Connector.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ExternalInteractorBase","isInArray","Connector","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","reset","interact","options","status","mousePos","distance","Math","abs","retina","connectModeRadius","query","particles","quadTree","queryCircle","i","p1","pos1","getPosition","p2","slice","pos2","distMax","connectModeDistance","xDiff","x","yDiff","y","canvas","drawConnectLine"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ExternalInteractorBase, isInArray } from \"tsparticles-engine\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    reset() {\n    }\n    interact() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const container = this.container, options = container.actualOptions;\n            if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n                const mousePos = container.interactivity.mouse.position;\n                if (!mousePos) {\n                    return;\n                }\n                const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance);\n                let i = 0;\n                for (const p1 of query) {\n                    const pos1 = p1.getPosition();\n                    for (const p2 of query.slice(i + 1)) {\n                        const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                        if (xDiff < distMax && yDiff < distMax) {\n                            container.canvas.drawConnectLine(p1, p2);\n                        }\n                    }\n                    ++i;\n                }\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}