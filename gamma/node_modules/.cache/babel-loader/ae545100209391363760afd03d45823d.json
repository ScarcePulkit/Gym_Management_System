{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  const colorStyle = getStyleFromHsl(color, opacity);\n\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\n\nexport function loadImage(image) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise(resolve => {\n      image.loading = true;\n      const img = new Image();\n      img.addEventListener(\"load\", () => {\n        image.element = img;\n        image.loading = false;\n        resolve();\n      });\n      img.addEventListener(\"error\", () => {\n        image.error = true;\n        image.loading = false;\n        console.error(`Error tsParticles - loading image: ${image.source}`);\n        resolve();\n      });\n      img.src = image.source;\n    });\n  });\n}\nexport function downloadSvgImage(image) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (image.type !== \"svg\") {\n      yield loadImage(image);\n      return;\n    }\n\n    image.loading = true;\n    const response = yield fetch(image.source);\n    image.loading = false;\n\n    if (!response.ok) {\n      console.error(\"Error tsParticles - Image not found\");\n      image.error = true;\n    }\n\n    if (!image.error) {\n      image.svgData = yield response.text();\n    }\n  });\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n\n  const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1);\n  const svg = new Blob([svgColoredData], {\n    type: \"image/svg+xml\"\n  });\n  const domUrl = URL || window.URL || window.webkitURL || window;\n  const url = domUrl.createObjectURL(svg);\n  const img = new Image();\n  const imageRes = {\n    data: Object.assign(Object.assign({}, image), {\n      svgData: svgColoredData\n    }),\n    ratio: imageData.width / imageData.height,\n    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n    source: imageData.src\n  };\n  img.addEventListener(\"load\", () => {\n    const pImage = particle.image;\n\n    if (pImage) {\n      pImage.loaded = true;\n      image.element = img;\n    }\n\n    domUrl.revokeObjectURL(url);\n  });\n  img.addEventListener(\"error\", () => {\n    domUrl.revokeObjectURL(url);\n    const img2 = Object.assign(Object.assign({}, image), {\n      error: false,\n      loading: true\n    });\n    loadImage(img2).then(() => {\n      const pImage = particle.image;\n\n      if (pImage) {\n        image.element = img2.element;\n        pImage.loaded = true;\n      }\n    });\n  });\n  img.src = url;\n  return imageRes;\n}","map":{"version":3,"sources":["C:/Users/dhair_gzqoc8v/Desktop/DBMS/DBMS_Project/gamma/node_modules/tsparticles-shape-image/Utils.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","getStyleFromHsl","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","loading","img","Image","addEventListener","element","error","console","source","src","downloadSvgImage","type","response","fetch","ok","text","replaceImageColor","imageData","particle","_a","_b","_c","svgColoredData","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","imageRes","data","Object","assign","ratio","width","height","replaceColor","replace_color","pImage","loaded","revokeObjectURL","img2"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { getStyleFromHsl } from \"tsparticles-engine\";\r\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\r\nfunction replaceColorSvg(imageShape, color, opacity) {\r\n    const { svgData } = imageShape;\r\n    if (!svgData) {\r\n        return \"\";\r\n    }\r\n    const colorStyle = getStyleFromHsl(color, opacity);\r\n    if (svgData.includes(\"fill\")) {\r\n        return svgData.replace(currentColorRegex, () => colorStyle);\r\n    }\r\n    const preFillIndex = svgData.indexOf(\">\");\r\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\r\n}\r\nexport function loadImage(image) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve) => {\r\n            image.loading = true;\r\n            const img = new Image();\r\n            img.addEventListener(\"load\", () => {\r\n                image.element = img;\r\n                image.loading = false;\r\n                resolve();\r\n            });\r\n            img.addEventListener(\"error\", () => {\r\n                image.error = true;\r\n                image.loading = false;\r\n                console.error(`Error tsParticles - loading image: ${image.source}`);\r\n                resolve();\r\n            });\r\n            img.src = image.source;\r\n        });\r\n    });\r\n}\r\nexport function downloadSvgImage(image) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (image.type !== \"svg\") {\r\n            yield loadImage(image);\r\n            return;\r\n        }\r\n        image.loading = true;\r\n        const response = yield fetch(image.source);\r\n        image.loading = false;\r\n        if (!response.ok) {\r\n            console.error(\"Error tsParticles - Image not found\");\r\n            image.error = true;\r\n        }\r\n        if (!image.error) {\r\n            image.svgData = yield response.text();\r\n        }\r\n    });\r\n}\r\nexport function replaceImageColor(image, imageData, color, particle) {\r\n    var _a, _b, _c;\r\n    const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1);\r\n    const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\r\n    const domUrl = URL || window.URL || window.webkitURL || window;\r\n    const url = domUrl.createObjectURL(svg);\r\n    const img = new Image();\r\n    const imageRes = {\r\n        data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\r\n        ratio: imageData.width / imageData.height,\r\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\r\n        source: imageData.src,\r\n    };\r\n    img.addEventListener(\"load\", () => {\r\n        const pImage = particle.image;\r\n        if (pImage) {\r\n            pImage.loaded = true;\r\n            image.element = img;\r\n        }\r\n        domUrl.revokeObjectURL(url);\r\n    });\r\n    img.addEventListener(\"error\", () => {\r\n        domUrl.revokeObjectURL(url);\r\n        const img2 = Object.assign(Object.assign({}, image), { error: false, loading: true });\r\n        loadImage(img2).then(() => {\r\n            const pImage = particle.image;\r\n            if (pImage) {\r\n                image.element = img2.element;\r\n                pImage.loaded = true;\r\n            }\r\n        });\r\n    });\r\n    img.src = url;\r\n    return imageRes;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}