{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  interact() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const container = this.container,\n            options = container.actualOptions,\n            interactivity = options.interactivity;\n\n      if (!interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n        return;\n      }\n\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const distance = container.retina.grabModeDistance,\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      for (const particle of query) {\n        const pos = particle.getPosition(),\n              pointDistance = getDistance(pos, mousePos);\n\n        if (pointDistance > distance) {\n          continue;\n        }\n\n        const grabLineOptions = interactivity.modes.grab.links,\n              lineOpacity = grabLineOptions.opacity,\n              opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n        if (opacityLine <= 0) {\n          continue;\n        }\n\n        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n        if (!container.particles.grabLineColor) {\n          const linksOptions = options.interactivity.modes.grab.links;\n          container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n        }\n\n        const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n        if (!colorLine) {\n          return;\n        }\n\n        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/khushil/Project/DBMS_Project/gamma/node_modules/tsparticles-interaction-external-grab/Grabber.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ExternalInteractorBase","getDistance","getLinkColor","getLinkRandomColor","isInArray","mouseMoveEvent","Grabber","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","reset","interact","_a","options","status","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n            if (!interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n                return;\n            }\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n                if (pointDistance > distance) {\n                    continue;\n                }\n                const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                if (opacityLine <= 0) {\n                    continue;\n                }\n                const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                if (!container.particles.grabLineColor) {\n                    const linksOptions = options.interactivity.modes.grab.links;\n                    container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                }\n                const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n                if (!colorLine) {\n                    return;\n                }\n                container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}